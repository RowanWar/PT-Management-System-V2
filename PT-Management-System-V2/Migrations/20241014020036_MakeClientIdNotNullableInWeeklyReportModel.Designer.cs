// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PT_Management_System_V2.Data;

#nullable disable

namespace PT_Management_System_V2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241014020036_MakeClientIdNotNullableInWeeklyReportModel")]
    partial class MakeClientIdNotNullableInWeeklyReportModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_AspNetUserRoles_RoleId1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("AccountActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ApplicationUserId");

                    b.Property<bool?>("ContactByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ContactByPhone")
                        .HasColumnType("boolean");

                    b.Property<string>("Referral")
                        .HasColumnType("text");

                    b.Property<bool?>("Referred")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.HasKey("ClientId")
                        .HasName("client_pkey");

                    b.HasIndex("ApplicationUserId")
                        .HasDatabaseName("IX_client_ApplicationUserId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_client_UserId");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.ClientMeasurement", b =>
                {
                    b.Property<int>("ClientMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_measurement_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientMeasurementId"));

                    b.Property<decimal?>("Bicep")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("bicep");

                    b.Property<decimal?>("Chest")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("chest");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<decimal?>("Hip")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("hip");

                    b.Property<decimal?>("Tricep")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("tricep");

                    b.Property<decimal?>("Waist")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("waist");

                    b.HasKey("ClientMeasurementId")
                        .HasName("client_measurement_pkey");

                    b.ToTable("client_measurement", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.ClientWeight", b =>
                {
                    b.Property<int>("ClientWeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_weight_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientWeightId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("weight");

                    b.HasKey("ClientWeightId")
                        .HasName("client_weight_pkey");

                    b.ToTable("client_weight", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Coach", b =>
                {
                    b.Property<int>("CoachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("coach_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoachId"));

                    b.Property<string>("CoachProfileDescription")
                        .HasColumnType("text");

                    b.Property<string>("CoachQualifications")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("CoachId")
                        .HasName("coach_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("coach", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.CoachClient", b =>
                {
                    b.Property<int?>("CoachId")
                        .HasColumnType("integer")
                        .HasColumnName("coach_id");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ClientEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("client_end_date");

                    b.Property<DateTime>("ClientStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("client_start_date");

                    b.Property<int>("MonthlyCharge")
                        .HasColumnType("integer")
                        .HasColumnName("monthly_charge");

                    b.HasKey("CoachId", "ClientId")
                        .HasName("PK_coach_client");

                    b.HasIndex("ClientId");

                    b.ToTable("coach_client", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExerciseId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("exercise_name");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("muscle_group");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ExerciseId")
                        .HasName("exercise_pkey");

                    b.HasIndex(new[] { "ExerciseName" }, "exercise_exercise_name_key")
                        .IsUnique();

                    b.ToTable("exercise", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.HealthCondition", b =>
                {
                    b.Property<int>("HealthConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("health_condition_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HealthConditionId"));

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<string>("HealthCondition1")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("health_condition");

                    b.HasKey("HealthConditionId")
                        .HasName("health_condition_pkey");

                    b.ToTable("health_condition", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.HealthConditionClient", b =>
                {
                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int?>("HealthConditionId")
                        .HasColumnType("integer")
                        .HasColumnName("health_condition_id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HealthConditionId");

                    b.ToTable("health_condition_client", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<string>("FilePath")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("file_path");

                    b.HasKey("ImageId")
                        .HasName("image_pkey");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Set", b =>
                {
                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("set_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetId"));

                    b.Property<DateTime?>("Endtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("endtime");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<int?>("SetCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("set_category_id");

                    b.Property<DateTime?>("Starttime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starttime");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.Property<int?>("WorkoutExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("workout_exercise_id");

                    b.HasKey("SetId")
                        .HasName("set_pkey");

                    b.HasIndex("SetCategoryId");

                    b.HasIndex("WorkoutExerciseId");

                    b.ToTable("set", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.SetCategory", b =>
                {
                    b.Property<int>("SetCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("set_category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetCategoryId"));

                    b.Property<string>("SetCategoryType")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("set_category_type");

                    b.HasKey("SetCategoryId")
                        .HasName("set_category_pkey");

                    b.ToTable("set_category", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.WeeklyReport", b =>
                {
                    b.Property<int>("WeeklyReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("weekly_report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeeklyReportId"));

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_in_date");

                    b.Property<decimal?>("CheckInWeight")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("check_in_weight");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("WeeklyReportId")
                        .HasName("weekly_report_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("weekly_report", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.WeeklyReportImage", b =>
                {
                    b.Property<int>("WeeklyReportImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("weekly_report_image_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeeklyReportImageId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<int?>("WeeklyReportId")
                        .HasColumnType("integer")
                        .HasColumnName("weekly_report_id");

                    b.HasKey("WeeklyReportImageId")
                        .HasName("weekly_report_image_pkey");

                    b.HasIndex("ImageId");

                    b.HasIndex("WeeklyReportId");

                    b.ToTable("weekly_report_image", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workout_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkoutId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool?>("WorkoutActive")
                        .HasColumnType("boolean")
                        .HasColumnName("workout_active");

                    b.Property<DateOnly>("WorkoutDate")
                        .HasColumnType("date")
                        .HasColumnName("workout_date");

                    b.HasKey("WorkoutId")
                        .HasName("workout_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("workout", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.WorkoutExercise", b =>
                {
                    b.Property<int>("WorkoutExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workout_exercise_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkoutExerciseId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int?>("WorkoutId")
                        .HasColumnType("integer")
                        .HasColumnName("workout_id");

                    b.HasKey("WorkoutExerciseId")
                        .HasName("workout_exercise_pkey");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("workout_exercise", (string)null);
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex1");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId")
                        .HasDatabaseName("IX_AspNetRoleClaims_RoleId1");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("AccountActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex")
                        .HasDatabaseName("EmailIndex1");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex1");

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId")
                        .HasDatabaseName("IX_AspNetUserClaims_UserId1");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PT_Management_System_V2.Data.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PT_Management_System_V2.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Client", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_client_AspNetUsers_ApplicationUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Coach", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Coach_AspNetUsers_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.CoachClient", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.Client", "Client")
                        .WithMany("CoachClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("coach_client_client_id_fkey");

                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.Coach", "Coach")
                        .WithMany("CoachClients")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("coach_client_coach_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.HealthConditionClient", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("health_condition_client_client_id_fkey");

                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.HealthCondition", "HealthCondition")
                        .WithMany()
                        .HasForeignKey("HealthConditionId")
                        .HasConstraintName("health_condition_client_health_condition_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("HealthCondition");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Set", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.SetCategory", "SetCategory")
                        .WithMany("Sets")
                        .HasForeignKey("SetCategoryId")
                        .HasConstraintName("set_set_category_id_fkey");

                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.WorkoutExercise", "WorkoutExercise")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutExerciseId")
                        .HasConstraintName("set_workout_exercise_id_fkey");

                    b.Navigation("SetCategory");

                    b.Navigation("WorkoutExercise");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.WeeklyReport", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.Client", "Client")
                        .WithMany("WeeklyReports")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("weekly_report_user_id_fkey");

                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.User", null)
                        .WithMany("WeeklyReports")
                        .HasForeignKey("UserId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.WeeklyReportImage", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.Image", "Image")
                        .WithMany("WeeklyReportImages")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("weekly_report_image_image_id_fkey");

                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.WeeklyReport", "WeeklyReport")
                        .WithMany("WeeklyReportImages")
                        .HasForeignKey("WeeklyReportId")
                        .HasConstraintName("weekly_report_image_weekly_report_id_fkey");

                    b.Navigation("Image");

                    b.Navigation("WeeklyReport");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Workout", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("workout_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.WorkoutExercise", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("workout_exercise_exercise_id_fkey");

                    b.HasOne("PT_Management_System_V2.Data.EntityFrameworkModels.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .HasConstraintName("workout_exercise_workout_id_fkey");

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetUserToken", b =>
                {
                    b.HasOne("PT_Management_System_V2.Data.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Client", b =>
                {
                    b.Navigation("CoachClients");

                    b.Navigation("WeeklyReports");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Coach", b =>
                {
                    b.Navigation("CoachClients");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Image", b =>
                {
                    b.Navigation("WeeklyReportImages");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.SetCategory", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.User", b =>
                {
                    b.Navigation("WeeklyReports");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.WeeklyReport", b =>
                {
                    b.Navigation("WeeklyReportImages");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.EntityFrameworkModels.WorkoutExercise", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("PT_Management_System_V2.Data.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
